datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  
  accounts      Account[]
  sessions      Session[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  invoices      Invoice[]
  clients       Client[]
  processedDocuments ProcessedDocument[]
}

model Client {
  id               String    @id @default(cuid())
  name             String
  email            String?
  phone            String?
  address          String?
  registrationCode String?
  vatCode          String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  invoices         Invoice[]
  user             User      @relation(fields: [userId], references: [id])
  userId           String
}

model Invoice {
  id            String         @id @default(cuid())
  number        String         @unique
  date          DateTime
  dueDate       DateTime
  totalAmount   Float
  vatAmount     Float
  status        InvoiceStatus  @default(DRAFT)
  
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  
  client        Client         @relation(fields: [clientId], references: [id])
  clientId      String
  
  items         InvoiceItem[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id            String    @id @default(cuid())
  name          String
  quantity      Float
  unitPrice     Float
  vatRate       Float
  totalPrice    Float
  
  invoice       Invoice   @relation(fields: [invoiceId], references: [id])
  invoiceId     String
}

model VatRate {
  id          String    @id @default(cuid())
  name        String
  rate        Float
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Unit {
  id          String    @id @default(cuid())
  name        String
  shortName   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BankAccount {
  id              String    @id @default(cuid())
  bankName        String
  accountNumber   String
  iban            String
  swift           String?
  isDefault       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum DocumentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model ProcessedDocument {
  id            String         @id @default(cuid())
  originalName  String
  fileType      String
  compressedUrl String         // URL to compressed JPG version
  originalUrl   String?        // URL to original file if needed
  extractedData Json           // AI extracted invoice data
  coordinates   Json           // OCR coordinates for highlighting
  status        DocumentStatus @default(PENDING)
  
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
